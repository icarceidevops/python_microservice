name: Pylint, MyPy, Pytest, Coverage, Sphinx

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py' | grep -v '^docs/')
      - name: Type checking with MyPy
        run: |
          mypy --exclude '^docs/' .
      - name: Run tests with Pytest
        run: |
          pytest --ignore=docs
      - name: Run coverage
        run: |
          coverage run -m pytest --ignore=docs
          coverage report -m
  deploy-gh-pages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build Sphinx documentation
        run: |
          cd docs
          make html
      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
  build-and-push-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: icarcei/sun_microsevice:latest
  
  update-container:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo ${{ secrets.SSH_PRIVATE_KEY }} > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          touch ~/.ssh/known_hosts
          echo ${{ secrets.SSH_PUBLIC_KEY}} >> ~/known_hosts
      - name: Update Docker Container on EC2 Machine
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ vars.EC2_MACHINE_IP }} "sudo docker pull icarcei/sun_microsevice:latest"
          ssh -i ~/.ssh/id_rsa ec2-user@${{ vars.EC2_MACHINE_IP }} "sudo docker stop gigi_kent || true"
          ssh -i ~/.ssh/id_rsa ec2-user@${{ vars.EC2_MACHINE_IP }} "sudo docker rm gigi_kent || true"
          ssh -i ~/.ssh/id_rsa ec2-user@${{ vars.EC2_MACHINE_IP }} "sudo docker run --name gigi_kent --restart always -e OPENAI_API_KEY=${OPENAI_API_KEY} -p 80:80 -p 8080:8080 -d icarcei/sun_microsevice:latest"